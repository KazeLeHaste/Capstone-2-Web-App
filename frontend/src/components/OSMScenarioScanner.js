/**
 * OSM Scenario Scanner Component
 * 
 * Handles scanning for new OSM scenarios generated by OSM Web Wizard,
 * displaying them in a list, and providing import functionality with
 * custom naming and options.
 * 
 * Author: Traffic Simulator Team
 * Date: October 2025
 */

import React, { useState, useEffect } from 'react';
import { 
  RefreshCw,
  FileText,
  Calendar,
  HardDrive,
  Download,
  AlertCircle,
  CheckCircle2,
  Loader2,
  FolderOpen,
  Car,
  Bus,
  Truck,
  Car as Motorcycle
} from 'lucide-react';
import { osmApi } from '../utils/apiClient';

const OSMScenarioScanner = ({ onScenarioImported }) => {
  const [scenarios, setScenarios] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [importing, setImporting] = useState(null);
  const [showImportModal, setShowImportModal] = useState(false);
  const [selectedScenario, setSelectedScenario] = useState(null);
  const [importForm, setImportForm] = useState({
    target_name: '',
    enhance_diversity: false
  });

  useEffect(() => {
    scanScenarios();
  }, []);

  const scanScenarios = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await osmApi.scanScenarios();
      
      if (response.data.success) {
        setScenarios(response.data.scenarios || []);
      } else {
        setError(response.data.error || 'Failed to scan scenarios');
      }
    } catch (error) {
      setError(error.response?.data?.error || 'Failed to scan scenarios');
      console.error('Scan scenarios error:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleImport = (scenario) => {
    setSelectedScenario(scenario);
    setImportForm({
      target_name: generateSuggestedName(scenario),
      enhance_diversity: false
    });
    setShowImportModal(true);
  };

  const generateSuggestedName = (scenario) => {
    // Generate a suggested name based on timestamp
    const date = new Date(scenario.created_at);
    const dateStr = date.toISOString().slice(0, 10).replace(/-/g, '_');
    const timeStr = date.toTimeString().slice(0, 5).replace(':', '');
    return `osm_scenario_${dateStr}_${timeStr}`;
  };

  const handleImportSubmit = async () => {
    if (!selectedScenario || !importForm.target_name.trim()) {
      return;
    }

    setImporting(selectedScenario.folder_name);
    
    try {
      const response = await osmApi.importScenario({
        source_folder: selectedScenario.folder_name,
        target_name: importForm.target_name.trim(),
        enhance_diversity: importForm.enhance_diversity
      });

      if (response.data.success) {
        // Remove imported scenario from list
        setScenarios(prev => prev.filter(s => s.folder_name !== selectedScenario.folder_name));
        
        // Close modal
        setShowImportModal(false);
        setSelectedScenario(null);
        
        // Notify parent
        if (onScenarioImported) {
          onScenarioImported({
            name: importForm.target_name,
            source: selectedScenario.folder_name,
            vehicle_types: response.data.vehicle_types
          });
        }
      } else {
        setError(response.data.error || 'Failed to import scenario');
      }
    } catch (error) {
      setError(error.response?.data?.error || 'Failed to import scenario');
      console.error('Import scenario error:', error);
    } finally {
      setImporting(null);
    }
  };

  const getVehicleTypeIcon = (vehicleType) => {
    switch (vehicleType) {
      case 'passenger': return Car;
      case 'bus': return Bus;
      case 'truck': return Truck;
      case 'motorcycle': return Motorcycle;
      default: return Car;
    }
  };

  const formatFileSize = (sizeInMB) => {
    if (sizeInMB < 1) {
      return `${(sizeInMB * 1024).toFixed(0)} KB`;
    }
    return `${sizeInMB.toFixed(1)} MB`;
  };

  return (
    <div className="osm-scanner-container">
      {/* Header */}
      <div className="osm-scanner-header">
        <div className="osm-scanner-title-section">
          <h3>Import Generated Scenarios</h3>
          <p>Scan for new scenarios created by OSM Web Wizard and import them as networks</p>
        </div>
        <button
          onClick={scanScenarios}
          disabled={loading}
          className="osm-scanner-refresh-button"
        >
          <RefreshCw className={`osm-scanner-refresh-icon ${loading ? 'spinning' : ''}`} />
          <span>Scan for New Scenarios</span>
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="osm-error-alert">
          <div className="osm-error-content">
            <AlertCircle className="osm-error-icon" />
            <p className="osm-error-text">{error}</p>
          </div>
        </div>
      )}

      {/* Loading State */}
      {loading && (
        <div className="osm-scanner-loading">
          <Loader2 className="osm-scanner-loading-icon" />
          <p className="osm-scanner-loading-text">Scanning for scenarios...</p>
        </div>
      )}

      {/* Scenarios List */}
      {!loading && scenarios.length === 0 && (
        <div className="osm-scanner-empty">
          <FolderOpen className="osm-scanner-empty-icon" />
          <h4 className="osm-scanner-empty-title">No New Scenarios Found</h4>
          <p className="osm-scanner-empty-description">
            No new OSM scenarios were detected. Make sure you have:
          </p>
          <ul className="osm-scanner-empty-list">
            <li>• Generated a scenario using OSM Web Wizard</li>
            <li>• Completed the generation process</li>
            <li>• Allowed the wizard to finish saving files</li>
          </ul>
        </div>
      )}

      {!loading && scenarios.length > 0 && (
        <div className="osm-scenarios-list">
          {scenarios.map((scenario) => (
            <div key={scenario.folder_name} className="osm-scenario-card">
              <div className="flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <Calendar className="w-4 h-4 text-gray-500" />
                    <span className="font-medium text-gray-900">
                      {scenario.created_at_formatted}
                    </span>
                    <span className="text-sm text-gray-500">
                      ({scenario.folder_name})
                    </span>
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div className="flex items-center space-x-2">
                      <FileText className="w-4 h-4 text-gray-500" />
                      <span>{scenario.file_count} files</span>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <HardDrive className="w-4 h-4 text-gray-500" />
                      <span>{formatFileSize(scenario.size_mb)}</span>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <CheckCircle2 className="w-4 h-4 text-green-500" />
                      <span className="text-green-700">Ready</span>
                    </div>
                    
                    <div className="flex items-center space-x-1">
                      {scenario.vehicle_types.map((vehicleType) => {
                        const Icon = getVehicleTypeIcon(vehicleType);
                        return (
                          <Icon 
                            key={vehicleType} 
                            className="w-4 h-4 text-gray-600" 
                            title={vehicleType}
                          />
                        );
                      })}
                      <span className="text-xs text-gray-500 ml-1">
                        {scenario.vehicle_types.length} types
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 ml-4">
                  <button
                    onClick={() => handleImport(scenario)}
                    disabled={importing === scenario.folder_name}
                    className={`osm-button ${importing === scenario.folder_name ? 'secondary' : 'primary'}`}
                  >
                    {importing === scenario.folder_name ? (
                      <>
                        <Loader2 className="w-4 h-4 animate-spin" />
                        <span>Importing...</span>
                      </>
                    ) : (
                      <>
                        <Download className="w-4 h-4" />
                        <span>Import</span>
                      </>
                    )}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Import Modal */}
      {showImportModal && selectedScenario && (
        <div className="osm-modal-backdrop">
          <div className="osm-modal-container osm-import-modal">
            <div className="osm-modal-header">
              <div className="osm-modal-header-content">
                <h3 className="osm-modal-title">Import OSM Scenario</h3>
              </div>
            </div>
            
            <div className="osm-modal-content">
              <div className="space-y-4">
                <div>
                  <label className="osm-form-label">
                    Source Scenario
                  </label>
                  <div className="osm-source-scenario">
                    <div className="osm-source-scenario-name">{selectedScenario.folder_name}</div>
                    <div className="osm-source-scenario-meta">{selectedScenario.created_at_formatted}</div>
                    <div className="osm-source-scenario-meta">{selectedScenario.file_count} files, {selectedScenario.vehicle_types.join(', ')}</div>
                  </div>
                </div>
                
                <div>
                  <label htmlFor="network-name" className="osm-form-label">
                    Network Name
                  </label>
                  <input
                    id="network-name"
                    type="text"
                    value={importForm.target_name}
                    onChange={(e) => setImportForm(prev => ({ ...prev, target_name: e.target.value }))}
                    placeholder="Enter network name"
                    className="osm-form-input"
                  />
                  <p className="osm-form-help">
                    Use letters, numbers, hyphens, and underscores only
                  </p>
                </div>
                
                <div className="osm-checkbox-container">
                  <input
                    id="enhance-diversity"
                    type="checkbox"
                    checked={importForm.enhance_diversity}
                    onChange={(e) => setImportForm(prev => ({ ...prev, enhance_diversity: e.target.checked }))}
                    className="osm-form-checkbox"
                  />
                  <label htmlFor="enhance-diversity" className="osm-checkbox-label">
                    Enhance route diversity (may reduce realism)
                  </label>
                </div>
              </div>
            </div>
            
            <div className="osm-modal-footer">
              <div className="osm-footer-left">
                <button
                  onClick={() => setShowImportModal(false)}
                  className="osm-button back"
                >
                  Cancel
                </button>
              </div>
              <div className="osm-footer-right">
                <button
                  onClick={handleImportSubmit}
                  disabled={!importForm.target_name.trim() || importing}
                  className="osm-button primary"
                >
                  {importing ? 'Importing...' : 'Import Scenario'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default OSMScenarioScanner;